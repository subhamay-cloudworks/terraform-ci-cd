name: "Terraform Plan and Deploy"

on:
  workflow_call:
    inputs:
      terraform_ver:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      github_env:
        description: 'Specifies the GitHub deployment environment.'
        required: false
        type: string
        default: "devl"
      tfvars_filename:
        description: 'Specifies the Terraform TFVARS file.'
        required: true
        type: string
    secrets:
      aws_region:
        required: true
      aws_role_arn:
        required: true
      aws_tf_state_bucket_name:
        required: true
      aws_tf_state_bucket_key_name: 
        required: true
      

permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR

jobs:
  ## Only Validate and Plan
  validate-plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.github_env }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Change file name
        run: | 
          mv ${{ github.workspace }}/${{ inputs.tfvars_filename }}  ${{ github.workspace }}/terraform.tfvars 

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.aws_role_arn }}
          aws-region: ${{ secrets.aws_region }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.aws_tf_state_bucket_name }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.aws_tf_state_bucket_key_name }}
        run: terraform init -backend-config="bucket=${{ secrets.aws_tf_state_bucket_name }}" -backend-config="key=${{ secrets.aws_tf_state_bucket_key_name }}" -backend-config="region=${{ secrets.aws_region }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  ## Plan and Apply 
  apply:
    needs: validate-plan
    runs-on: ubuntu-latest
    # environment: ${{ inputs.github_env }}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Change file name
        run: | 
          mv ${{ github.workspace }}/${{ inputs.tfvars_filename }}  ${{ github.workspace }}/terraform.tfvars 

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.aws_role_arn }}
          aws-region: ${{ secrets.aws_region }}
          role-session-name: github-aws-erraform-oidc

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.aws_tf_state_bucket_name }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.aws_tf_state_bucket_key_name }}
        run: terraform init -backend-config="bucket=${{ secrets.aws_tf_state_bucket_name }}" -backend-config="key=${{ secrets.aws_tf_state_bucket_key_name }}" -backend-config="region=${{ secrets.aws_region }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
