name: "Terraform Plan"
on:
  workflow_call:
    inputs:
      terraform_ver:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      github_env:
        description: 'Specifies the GitHub deployment environment.'
        required: false
        type: string
        default: "devl"
      aws_region: 
        description: 'Specifies the AWS Region.'
        required: true
        type: string
        default: "us-east-1"
      aws_role_arn: 
        description: 'Specifies the AWS Region.'
        required: true
        type: string
      aws_tf_state_bucket_name: 
        description: 'S3 Bucket to store the Terraform state file.'
        required: true
        type: string
      aws_tf_state_bucket_key_name: 
        description: 'S3 Bucket key to store the Terraform state file.'
        required: true
        type: string
      tfvars_filename:
        description: 'Specifies the Terraform TFVARS file.'
        required: true
        type: string
permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Change file name
        run: | 
          mv ${{ github.workspace }}/${{ inputs.tfvars_filename }}  ${{ github.workspace }}/${{ inputs.github_env }}.auto.tfvars 

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.aws_role_arn }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ inputs.aws_tf_state_bucket_name }}
          AWS_BUCKET_KEY_NAME: ${{ inputs.aws_tf_state_bucket_key_name }}
        run: terraform init -backend-config="bucket=${{ inputs.aws_tf_state_bucket_name }}" -backend-config="key=${{ inputs.aws_tf_state_bucket_key_name }}" -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false